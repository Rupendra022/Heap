class Pair {
    int dist;
    int x;
    int y;

    Pair(int dist, int x, int y) {
        this.dist = dist;
        this.x = x;
        this.y = y;
    }
}

class Solution {
    public int[][] kClosest(int[][] points, int k) {

        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> b.dist - a.dist);
        int[][] res = new int[k][2];

        for (int i = 0; i < points.length; i++) {
            int x = points[i][0];
            int y = points[i][1];
            int dist = x * x + y * y;
            pq.add(new Pair(dist, x, y));
            if (pq.size() > k) {
                pq.poll();
            }
        }

        int j = 0;
        while (pq.size() > 0) {
            Pair p = pq.poll();
            res[j][0] = p.x;
            res[j][1] = p.y;
            j++;
        }

        return res;

    }
}
