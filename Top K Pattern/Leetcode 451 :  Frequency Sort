class Pair{
    Character ch ;
    int count ;
    Pair(Character ch , int count){
        this.ch = ch ; 
        this.count = count ; 
    }
}
class Solution {
    public String frequencySort(String s) {
        
      HashMap<Character,Integer> map = new HashMap<>();

      for(int i = 0 ; i<s.length() ; i++){
        map.put(s.charAt(i),map.getOrDefault(s.charAt(i),0)+1);
      }  

      PriorityQueue<Pair> pq = new PriorityQueue<>((a,b) -> b.count - a.count ); // max heap 

      for(Character key : map.keySet()){
        int freq = map.get(key);
        pq.add(new Pair(key,freq));
      }

      StringBuilder sb = new StringBuilder();
      while(!pq.isEmpty()){
        Pair current = pq.poll();
        Character ch  = current.ch; 
        int freq = current.count ; 
        for(int i = 0 ; i<freq ; i++){
            sb.append(ch);
        }
      }

      return sb.toString();
    }
}
